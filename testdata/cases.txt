# Special case, we need an artificial wrapper root element.

<a></a>

----

type A struct {
	XMLName xml.Name `xml:"a"`
	Text    string   `xml:",chardata"`
}

========


# https://play.golang.org/p/MC1UY2efvA

<a><b></b></a>

----

type A struct {
	XMLName xml.Name `xml:"a"`
	Text    string   `xml:",chardata"`
	B       struct {
		Text string `xml:",chardata"`
	} `xml:"b"`
}

========

# https://play.golang.org/p/2CN4kME47j


<a><b></b><b></b></a>

----

type A struct {
	XMLName xml.Name `xml:"a"`
	Text    string   `xml:",chardata"`
	B       []struct {
		Text string `xml:",chardata"`
	} `xml:"b"`
}


========


# Chardata and attribute, https://play.golang.org/p/-Y9h4gYjpO

<a id="1"></a>

----

type A struct {
	XMLName xml.Name `xml:"a"`
	Text    string   `xml:",chardata"`
	ID      string   `xml:"id,attr"`
}


========


# Two attributes, https://play.golang.org/p/F6TUvyz0jG

<a id="1" name="x"></a>

----

ype A struct {
	XMLName xml.Name `xml:"a"`
	Text    string   `xml:",chardata"`
	ID      string   `xml:"id,attr"`
	Name    string   `xml:"name,attr"`
}


========


# Chardata and attribute, https://play.golang.org/p/ajA1PUh_hQ

<a id="1" name="x"><b id="2">xxx</b></a>

----

type Document struct {
    XMLName xml.Name `xml:"a"`
    A       string   `xml:",chardata"`
    ID      string   `xml:"id,attr"`
    Name    string   `xml:"name,attr"`
    B       struct {
         ID   string `xml:"id,attr"`
         Text string `xml:",chardata"`
    } `xml:"b"`
}
